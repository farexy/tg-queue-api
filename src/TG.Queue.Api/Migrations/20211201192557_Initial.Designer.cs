// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TG.Queue.Api.Db;

namespace TG.Queue.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211201192557_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TG.Queue.Api.Entities.Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BattleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("battle_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpectedStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expected_start_time");

                    b.Property<bool>("Open")
                        .HasColumnType("boolean")
                        .HasColumnName("open");

                    b.Property<string>("ServerIp")
                        .HasColumnType("text")
                        .HasColumnName("server_ip");

                    b.Property<int?>("ServerPort")
                        .HasColumnType("integer")
                        .HasColumnName("server_port");

                    b.HasKey("Id")
                        .HasName("pk_battles");

                    b.ToTable("battles");
                });

            modelBuilder.Entity("TG.Queue.Api.Entities.BattleUser", b =>
                {
                    b.Property<Guid>("BattleId")
                        .HasColumnType("uuid")
                        .HasColumnName("battle_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("BattleId", "UserId")
                        .HasName("pk_battle_users");

                    b.ToTable("battle_users");
                });

            modelBuilder.Entity("TG.Queue.Api.Entities.BattleUser", b =>
                {
                    b.HasOne("TG.Queue.Api.Entities.Battle", "Battle")
                        .WithMany("Users")
                        .HasForeignKey("BattleId")
                        .HasConstraintName("fk_battle_users_battles_battle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");
                });

            modelBuilder.Entity("TG.Queue.Api.Entities.Battle", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
